---
openapi: 3.0.0
info:
  title: Account Manager
  description: |
    This is a sample of Account Managment service.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/Kavjar/REST/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://petstore.swagger.io/v2
paths:
  /family:
    post:
      tags:
      - family
      summary: Create family
      description: This can only be done by the logged in user.
      operationId: createFamily
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Family'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'
        "405":
          description: Invalid input
      security:
      - user_auth: []
  /family/{familyId}:
    get:
      tags:
      - family
      summary: Get account information
      description: Get budget of current family
      operationId: getterB
      parameters:
      - name: familyId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Server error
      security:
      - user_auth: []
    post:
      tags:
      - family
      summary: Cashflow
      operationId: moneyAdding
      parameters:
      - name: familyId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionData'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "405":
          description: Invalid input
        "400":
          description: Server error
      security:
      - user_auth: []
  /family/{familyId}/{id}:
    post:
      tags:
      - family
      summary: Add a new family member
      description: Add user to family
      operationId: addFMember
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: familyId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "200":
          description: operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'
        "405":
          description: Invalid input
      security:
      - user_auth: []
    delete:
      tags:
      - family
      summary: Delete an existing family member
      description: Delete user from family
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: familyId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
      security:
      - user_auth: []
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: successful operation
        "405":
          description: Invalid input
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
      - user_auth: []
  /user/{id}:
    get:
      tags:
      - user
      summary: Get account information
      description: Get budget of current user
      operationId: getterU
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Server error
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      security:
      - user_auth: []
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUserer
      parameters:
      - name: id
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
      - user_auth: []
components:
  schemas:
    TransactionData:
      type: object
      properties:
        id:
          type: integer
          format: int64
        familyId:
          type: integer
          format: int64
        accountId:
          type: integer
          format: int32
        money:
          type: integer
          format: currency
        direction:
          type: boolean
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        accountId:
          type: integer
          format: int64
    Family:
      required:
      - accountId
      - surname
      - users
      type: object
      properties:
        id:
          type: integer
          format: int64
        surname:
          type: string
          example: Karabin
        users:
          type: array
          xml:
            name: user
            wrapped: true
          items:
            $ref: '#/components/schemas/User'
        accountId:
          type: integer
          format: int64
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sum:
          type: integer
          format: int64
        expenses:
          type: array
          items:
            $ref: '#/components/schemas/Expenses'
        incomes:
          type: array
          items:
            $ref: '#/components/schemas/Incomes'
    Expenses:
      type: object
      properties:
        purchaseId:
          type: integer
        item:
          type: string
        price:
          type: integer
        date:
          type: string
          format: date-time
    Incomes:
      type: object
      properties:
        input:
          type: string
        sum:
          type: integer
        date:
          type: string
          format: date-time
  requestBodies:
    User:
      description: User object that needs to be added to the store
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
              username:
                type: string
              firstName:
                type: string
              lastName:
                type: string
        application/xml:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
              username:
                type: string
              firstName:
                type: string
              lastName:
                type: string
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    user_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
